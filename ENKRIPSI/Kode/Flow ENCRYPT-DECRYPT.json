[
    {
        "id": "b1c8d11b8f370b11",
        "type": "tab",
        "label": "Flow ENCRYPT-DECRYPT",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d87ed7590be5959b",
        "type": "mqtt in",
        "z": "b1c8d11b8f370b11",
        "name": "Health Data (Encrypted JSON)",
        "topic": "gateway/health_data",
        "qos": "1",
        "datatype": "json",
        "broker": "64f0550e39a12e04",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "40068845a8586d61",
                "e1e26577418f0bba"
            ]
        ]
    },
    {
        "id": "18a221e64478c5dc",
        "type": "debug",
        "z": "b1c8d11b8f370b11",
        "name": "Final Decrypted Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 120,
        "wires": []
    },
    {
        "id": "ed44002a53b0c010",
        "type": "ui_gauge",
        "z": "b1c8d11b8f370b11",
        "name": "Temperature",
        "group": "b01e82768c16fe00",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature (°C)",
        "label": "°C",
        "format": "{{payload.temperature}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b3a7",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "4a7ff4c0a29c1420",
        "type": "ui_gauge",
        "z": "b1c8d11b8f370b11",
        "name": "Heart Rate",
        "group": "b01e82768c16fe00",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Heart Rate (BPM)",
        "label": "bpm",
        "format": "{{payload.bpm}}",
        "min": 30,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "59c6988f2bd287e6",
        "type": "ui_gauge",
        "z": "b1c8d11b8f370b11",
        "name": "SpO2",
        "group": "b01e82768c16fe00",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "SpO2 (%)",
        "label": "%",
        "format": "{{payload.spo2}}",
        "min": "0",
        "max": 100,
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 990,
        "y": 240,
        "wires": []
    },
    {
        "id": "e1e26577418f0bba",
        "type": "debug",
        "z": "b1c8d11b8f370b11",
        "name": "RAW MQTT Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 340,
        "wires": []
    },
    {
        "id": "fdf758c5dabdaac0",
        "type": "json",
        "z": "b1c8d11b8f370b11",
        "name": "Parse Decrypted String",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "18a221e64478c5dc",
                "ed44002a53b0c010",
                "4a7ff4c0a29c1420",
                "59c6988f2bd287e6",
                "bbd565de38cd1576"
            ]
        ]
    },
    {
        "id": "40068845a8586d61",
        "type": "function",
        "z": "b1c8d11b8f370b11",
        "name": "Decrypt",
        "func": "// Ambil object 'Ascon' dari library yang sudah dimuat di global context\nconst { Ascon } = global.get('ascon');\n\n// --- KONFIGURASI: HARUS SAMA PERSIS DENGAN DI ESP32 ---\nconst key = Buffer.from([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10]);\nconst nonce = Buffer.from([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10]);\n// -----------------------------------------------------\nconst encrypted_data = msg.payload;\n\nif (!encrypted_data || !encrypted_data.ciphertext || !encrypted_data.tag) {\n    node.error(\"Invalid payload format. Missing 'ciphertext' or 'tag'.\", msg);\n    return null;\n}\n\n// 1. Ubah string HEX dari payload kembali menjadi Buffer\nconst ciphertext_buffer = Buffer.from(encrypted_data.ciphertext, 'hex');\nconst tag_buffer = Buffer.from(encrypted_data.tag, 'hex');\n\n// 2. Gabungkan ciphertext dan tag\nconst combined_payload = Buffer.concat([ciphertext_buffer, tag_buffer]);\n\ntry {\n    // 3. Dekripsi data\n    const decrypted_array = Ascon.decrypt(key, nonce, combined_payload);\n    \n    // 4. --- PERBAIKAN DI SINI ---\n    // Ubah hasil dekripsi (array byte) menjadi string JSON yang valid\n    const decrypted_string = Buffer.from(decrypted_array).toString('utf8');\n    \n    // 5. Set msg.payload dengan string JSON yang sudah bersih\n    msg.payload = decrypted_string;\n    \n    node.status({fill:\"green\", shape:\"dot\", text:\"Decryption OK\"});\n    node.warn(\"Decrypted output (Correct): \" + msg.payload); // Untuk debugging\n    return msg;\n    \n} catch (e) {\n    node.error(\"Decryption FAILED! Tag mismatch or incompatible libraries.\", msg);\n    node.error(e.message); \n    node.status({fill:\"red\", shape:\"ring\", text:\"Decryption FAILED\"});\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "fdf758c5dabdaac0"
            ]
        ]
    },
    {
        "id": "bbd565de38cd1576",
        "type": "function",
        "z": "b1c8d11b8f370b11",
        "name": "Add Timestamp to Payload",
        "func": "// Opsi untuk memformat waktu ke zona waktu Indonesia (WIB)\nconst options = {\n    timeZone: 'Asia/Jakarta',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false // Gunakan format 24 jam\n};\n\n// Buat string waktu yang sudah diformat sesuai WIB\nconst now = new Date().toLocaleString('en-GB', options);\n\n// Format 'en-GB' menghasilkan \"DD/MM/YYYY, HH:MM:SS\"\n// Kita hanya perlu mengganti koma dengan spasi\nconst formattedTimestamp = now.replace(',', '');\n\n// Tambahkan properti 'timestamp' ke object payload yang ada\nmsg.payload.timestamp = formattedTimestamp;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "20d443a46fe289b9"
            ]
        ]
    },
    {
        "id": "20d443a46fe289b9",
        "type": "ui_text",
        "z": "b1c8d11b8f370b11",
        "group": "b01e82768c16fe00",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Last Update",
        "label": "Data Terakhir Masuk",
        "format": "{{payload.timestamp}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1010,
        "y": 340,
        "wires": []
    },
    {
        "id": "64f0550e39a12e04",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.0.100",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b01e82768c16fe00",
        "type": "ui_group",
        "name": "Kesehatan",
        "tab": "dashboard-tab",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "dashboard-tab",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    }
]